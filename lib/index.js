/*!
 * Copyright 2019 Rob Cannon
 * 
 * Permission to use, copy, modify, and/or distribute this software for any purpose with or
 * without fee is hereby granted, provided that the above copyright notice and this
 * permission notice appear in all copies.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH REGARD TO
 * THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS. IN NO EVENT
 * SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR
 * ANY DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF
 * CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE
 * OR PERFORMANCE OF THIS SOFTWARE.
 */
!function(e,t){"object"==typeof exports&&"object"==typeof module?module.exports=t():"function"==typeof define&&define.amd?define([],t):"object"==typeof exports?exports["@robpc/logger"]=t():e["@robpc/logger"]=t()}(global,function(){return function(e){var t={};function o(n){if(t[n])return t[n].exports;var r=t[n]={i:n,l:!1,exports:{}};return e[n].call(r.exports,r,r.exports,o),r.l=!0,r.exports}return o.m=e,o.c=t,o.d=function(e,t,n){o.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:n})},o.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},o.t=function(e,t){if(1&t&&(e=o(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var n=Object.create(null);if(o.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var r in e)o.d(n,r,function(t){return e[t]}.bind(null,r));return n},o.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return o.d(t,"a",t),t},o.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},o.p="",o(o.s=0)}([function(e,t){const o=Object.freeze({TRACE:0,DEBUG:1,INFO:2,WARN:3,ERROR:4}),n=Object.freeze((e=>Object.keys(e).reduce((t,o)=>Object.assign({},t,{[e[o]]:o}),{}))(o));let r=o.ERROR;const u=(e,t,...o)=>{if(t>=r){const r=n[t];console.log(`[${e}] ${r}:`,...o)}};class i{constructor(e){this.name=e}trace(...e){u(this.name,o.TRACE,...e)}debug(...e){u(this.name,o.DEBUG,...e)}info(...e){u(this.name,o.INFO,...e)}warn(...e){u(this.name,o.WARN,...e)}error(...e){u(this.name,o.ERROR,...e)}}const l=new i("LogFactory"),c={},f={LEVELS:o,getLogLevel:()=>r,setLogLevel:e=>{let t=void 0;e&&"string"==typeof e?t=o[e.toUpperCase()]:"number"==typeof e&&Object.values(o).includes(e)&&(t=e),null!=t?(r=t,l.info(`Setting log level to ${n[r]}`)):l.error(`Could not set log level from '${e}'.`,`Valid options are ${Object.keys(o).join(", ")} or ${Object.values(o).join(", ")}`)},get:e=>(c[e]||(c[e]=new i(e)),c[e])};e.exports=f}])});